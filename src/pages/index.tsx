import { type NextPage } from 'next';
import Head from 'next/head';
import { useState } from 'react';
import { signIn, signOut, useSession } from 'next-auth/react';

import { api } from '~/utils/api';
import ComboListCard from '~/components/comboListCard';
import AddComboListForm from '~/components/addComboListForm';
import Image from 'next/image';

const Home: NextPage = () => {
  // userId should not be hardcoded in the future
  // Just here for development purposes
  const userId = 'clf1bxlaa0000oz2ss6okg767';
  const { data: sessionData } = useSession();
  const { data, isLoading, isError, refetch, isRefetchError } =
    api.comboList.getComboLists.useQuery({
      userId,
    });
  const apiDeleteComboList = api.comboList.removeComboList.useMutation();
  const [isCreatingList, setIsCreatingList] = useState<boolean>(false);

  const removeComboList = (id: number) => {
    apiDeleteComboList.mutate(
      { id },
      {
        onSuccess: () => {
          refetchComboLists();
        },
      }
    );
  };

  const refetchComboLists = () => {
    refetch().catch((err: string) =>
      console.error(`Something went wrong when refetching combo lists: ${err}`)
    );
  };

  const renderComboLists = data?.map(({ id, title }) => {
    return (
      <ComboListCard
        key={id}
        id={id}
        title={title}
        refetchComboLists={refetchComboLists}
        removeComboList={removeComboList}
      />
    );
  });

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center">
        <div className="container relative flex flex-col items-center gap-10 px-4 py-16">
          {sessionData?.user && (
            <div className="flex flex-row items-center gap-3">
              <Image
                alt="profile image"
                width={50}
                height={50}
                src={sessionData.user.image ? sessionData.user.image : ''}
                className="rounded-full"
              />
              <p className="text-lg">{sessionData.user.name}</p>
            </div>
          )}
          <AuthShowcase />
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            Combo <span className="text-[hsl(280,100%,70%)]">App</span>
          </h1>
          <button
            className="rounded-xl bg-green-600 bg-opacity-80 px-8 py-3 font-bold transition-all duration-300 hover:bg-opacity-100"
            onClick={() => setIsCreatingList(true)}
          >
            Add Combo list
          </button>
          {isCreatingList && (
            <AddComboListForm
              userId={userId}
              refetchComboLists={refetchComboLists}
              setIsCreatingList={setIsCreatingList}
            />
          )}
          {sessionData?.user ? (
            <>{renderComboLists}</>
          ) : sessionData?.user && isLoading ? (
            <div>Loading combolists...</div>
          ) : isError || isRefetchError ? (
            <div>An Error occured!</div>
          ) : (
            ''
          )}
        </div>
      </main>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={
          sessionData ? () => void signOut() : () => void signIn('discord')
        }
      >
        {sessionData ? 'Sign out' : 'Sign in'}
      </button>
    </div>
  );
};
